name: JAL compiling/execution test
on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-compiler:
    name: Build compiler
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
      - uses: gradle/actions/setup-gradle@v4
      - name: Free gradlew
        run: chmod +x ./gradlew
      - name: Build compiler
        run: ./gradlew :jalc:shadowJar
      - name: Upload jalc.jar
        uses: actions/upload-artifact@v4
        with:
          name: jalc-jar
          path: compiler/build/libs/jalc.jar
  test-examples:
    name: Test Example - ${{ matrix.example }}
    runs-on: ubuntu-latest
    needs: build-compiler
    strategy:
      matrix:
        example: [HelloWorld, BubbleSort, FizzBuzz, LinearSearch, OutputRedirect, SwitchExample, VariablesControl]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      - name: Download jalc.jar
        uses: actions/download-artifact@v4
        with:
          name: jalc-jar
          path: compiler/build/libs

      - name: Compile ${{ matrix.example }}.jal
        run: |
          cd examples
          java -jar ../compiler/build/libs/jalc.jar "${{ matrix.example }}.jal" --output outputs

          class_file=$(find outputs -name '*.class' | head -n1)
          if [ -z "$class_file" ]; then
            echo "No .class file found"
            exit 1
          fi
          # Save class name to a temp file
          basename "$class_file" .class > class_name.txt

      - name: Run ${{ matrix.example }}.class
        run: |
          cd examples
          class_name=$(cat class_name.txt)
          output=$(java -cp outputs "$class_name")
          echo "$output" > actual_output.txt

      - name: Compare output for ${{ matrix.example }}
        run: |
          cd examples
          # 出力と期待値を trim（末尾改行を削除）
          actual=$(< actual_output.txt tr -d '\n')
          expected=$(< outs/${{ matrix.example }}.out.txt tr -d '\n')

          if [ "$actual" != "$expected" ]; then
            echo "❌ Output mismatch for ${{ matrix.example }}"
            echo -e "\033[31mExpected:\033[0m"
            echo "$expected"
            echo -e "\033[31mGot:\033[0m"
            echo "$actual"
            exit 1
          else
            echo "✅ ${{ matrix.example }} passed"
          fi
